%% lqr_manual.m
%
% Description:
%   Computes the LQR gains that keep robot in place during the manual
%   trick.
%
% Inputs:
%   x_eq: the equilibrium state vector, x = [q; q_dot];
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   [Gains, Poles] = gains and closed-loop poles of LQR control

function [Gains, Poles] = lqr_manual(x_eq_3DOF,params)

M_eq = mass_matrix_3DOF(x_eq_3DOF,params);    % mass matrix at equilibrium
G_jac_eq = derivative_conservative_forces_3DOF(x_eq_3DOF,params); % gravitational and spring forces at equilibrium
A = [zeros(3,3),eye(3);-M_eq\G_jac_eq,zeros(3,3)];
% Open_Loop_Poles = eig(A)  % display the unstable open loop poles
B = [zeros(3,2);M_eq\[0,0;eye(2)]];   
Q_lqr = 10000*diag([1,1,1,0,0,0]);  
R_lqr = 1*diag([1,1]);
% then solve for optimal gains
[Gains,~,Poles] = lqr(A,B,Q_lqr,R_lqr);

end