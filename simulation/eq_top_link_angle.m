%% eq_top_link_angle.m
%
% Description:
%   Computes the angle for top link that causes robot to be in equilibrium
%   position for a given bottomLinkTheta and boardTheta
%
% Inputs:
%   x: the state vector, x = [q; q_dot];
%   boardTheta: angle of board with the ground
%   bottomLinkTheta: angle of bottom link with the board
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   x_wheel_left_rel = wheel location

function topLinkThetaEq = eq_top_link_angle(boardTheta,bottomLinkTheta,params)

boardMass = params.boardMass;
boardHeight = params.boardHeight/2;  % divide by 2 because jumping robot example measures height to center of mass
boardLength = params.boardLength;
bottomLinkRCoM = params.bottomLinkYCoM;
bottomLinkMass = params.bottomLinkMass;
bottomLinkHeight = params.bottomLinkHeight;
topLinkRCoM = params.topLinkYCoM;
topLinkMass = params.topLinkMass;

    function F = fun(x)
        F(1) = autogen_wheel_position_3DOF(boardMass,boardTheta,boardHeight,boardLength,bottomLinkRCoM,bottomLinkMass,bottomLinkTheta,bottomLinkHeight,topLinkRCoM,topLinkMass,x(1));
    end

initial_cond = [0];
topLinkThetaEq = fsolve(@fun,initial_cond);

end
