%% eq_torques.m
%
% Description:
%   Computes the motor torques that allow the robot to be in equilibrium
%   position for a given boardTheta, bottomLinkTheta, and topLinkTheta
%
% Inputs:
%   x: the state vector, x = [q; q_dot];
%   boardTheta: angle of board with the ground
%   bottomLinkTheta: angle of bottom link with the board
%   topLinkTheta: angle of top link with the board
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   [bottomMotorTorque, topMotorTorque] = motor torques

function [bottomMotorTorque, topMotorTorque] = eq_torques(boardTheta,bottomLinkTheta,topLinkTheta,params)

boardMass = params.boardMass;
boardHeight = params.boardHeight/2;  % divide by 2 because jumping robot example measures height to center of mass
boardLength = params.boardLength;
bottomLinkRCoM = params.bottomLinkYCoM;
bottomLinkMass = params.bottomLinkMass;
bottomLinkHeight = params.bottomLinkHeight;
g = params.g;
topLinkRCoM = params.topLinkYCoM;
topLinkMass = params.topLinkMass;

    function F = fun(x)
        diff = autogen_difference(boardMass,boardTheta,boardHeight,boardLength,bottomLinkRCoM,bottomLinkMass,bottomLinkTheta,bottomLinkHeight,x(1),g,topLinkRCoM,topLinkMass,topLinkTheta,x(2));
        F(1) = diff(1);
        F(2) = diff(2);
        F(3) = diff(3);
    end

initial_cond = [0,0];
[bottomMotorTorque, topMotorTorque] = fsolve(@fun,initial_cond);

end
