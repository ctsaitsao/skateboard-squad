%% constraint_forces.m
%
% Description:
%   Output function to compute the constraint forces acting on the jumping
%   robot
%
% Inputs:
%   tseg: the array of time values selected by ode45
%   xseg: the 10xlength(tseg) array of states computed by ode45;
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   Fseg: a 2xlength(tsim) array of constraint forces




function [F] = constraint_forces(F_active,params)

F = zeros(2,1);  % F = [F_l_y;F_r_y]

if sum(F_active) ~= 0
    
    i_force = 0;
    % add in the forces
    for ic = 1:2  % cycle through the  constraints
        if params.sim.constraints(ic) == 1  % if a constraint is active, assign a force
            i_force = i_force + 1;
            F(ic) = F_active(i_force);
        end
    end
    
    % add in the bilateral forces
%     if params.sim.constraints.uni(1) == 1 && params.sim.constraints.uni(2) == 1  % both feet are touching, distribute the bilateral force
%         F(1) = F_active(i_force+1)*F(3)/(F(3) + F(4));
%         F(2) = F_active(i_force+1)*F(4)/(F(3) + F(4));
%     elseif params.sim.constraints.uni(1) == 1  % if only the left foot is touching...
%         F(1) = F_active(i_force+1);  % the bilateral force acts only on the left foot 
%     elseif params.sim.constraints.uni(2) == 1  % if only the right foot is touching...
%         F(2) = F_active(i_force+1);  % the bilateral force acts only on the right foot
%     end

end

end

